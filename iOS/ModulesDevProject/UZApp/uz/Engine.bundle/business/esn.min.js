
;(function () {
    if (window.YYEsnBridge) return;
    var util = { 
        isObject: function (o) { 
            return Object.prototype.toString.call(o) === '[object Object]';
        } 
    }; 
    function YYEsnBridge() { 
        this.version = '1.0.2';
    }; 
    YYEsnBridge.prototype.ready = function (callback) { 
        if (window.api) {
            typeof callback === 'function' && callback();
        } else {
            document.addEventListener('apiready', function() { 
                typeof callback === 'function' && callback();
            }, false);
        }
    }; 
    YYEsnBridge.prototype.config = function (parameters) { 
        if (!util.isObject(parameters)) { 
            throw new Error('参数格式不正确');
        } 
        if (!parameters.signature || !parameters.agentId || !parameters.timeStamp) { 
            throw new Error('必要参数不存在');
        } 
        this.do('config', parameters);
    }; 
    YYEsnBridge.prototype.registerLifeCycle = function (parameters) { 
        if (!util.isObject(parameters)) { 
            throw new Error('参数格式不正确');
        } 

        var onShow = parameters.onShow;
        if (onShow && typeof onShow === 'function') {
            api.addEventListener({
                name:'viewappear'
            }, function(ret){
                onShow();
            });
        }

        var onHide = parameters.onHide;
        if (onHide && typeof onHide === 'function') {
            api.addEventListener({
                name:'viewdisappear'
            }, function(ret){
                onHide();
            });
        }
    }; 
    YYEsnBridge.prototype.registerHandler = function (parameters) { 
        if (!util.isObject(parameters)) { 
            throw new Error('参数格式不正确');
        } 
        for (var key in parameters) { 
            if (Object.prototype.hasOwnProperty.call(parameters, key)) {
                window.WebViewJavascriptBridge.registerHandler(key, parameters[key]);
            } 
        } 
    };
    YYEsnBridge.prototype.do = function (action, parameters) { 
        if (action === '' || typeof action !== 'string') { 
            throw new Error('参数格式不正确');
        } 
        if (!util.isObject(parameters)) { 
            parameters = {};
        } 
        try {
            if (typeof parameters.callback === 'function') {
                var handlerName = 'cb_' + action;
                window.WebViewJavascriptBridge.registerHandler(handlerName, parameters.callback);
                parameters.callback = handlerName;
            }
            
            var youZone = api.require('youZone');
            youZone.call({
                name: action,
                param: parameters
            }, function(res) {
                try {
                    if (!util.isObject(res)) {
                        res = JSON.parse(res);
                    }
                    if (res.error_code === '0') {
                        typeof parameters.success === 'function' && parameters.success(res.data);
                    } else {
                        var resultData = {};
                        resultData.errCode = res.error_code;
                        resultData.errDescription = res.error_description;
                        resultData.data = res.data;
                        typeof parameters.fail === 'function' && parameters.fail(resultData);
                    }
                } catch (e) {
                    var resultData = {};
                    resultData.errCode = '1002';
                    resultData.errDescription = 'data parse error';
                    typeof parameters.fail === 'function' && parameters.fail(resultData);
                }
                typeof parameters.complete === 'function' && parameters.complete();
            });
        } catch (e) { 
            throw new Error('参数格式不正确'); 
        } 
    };
    window.YYEsnBridge = new YYEsnBridge();
    
    var messageHandlers = {};
    function registerHandler(handlerName, handler) {
        messageHandlers[handlerName] = handler;
    };
    function _handleMessage(messageJSON) {
        try {
            var message = JSON.parse(messageJSON);
            var responseCallback;
            if (message.callbackId) {
                responseCallback = function(responseData) {
                    var youZone = api.require('youZone');
                    youZone.callback({
                        responseId: message.callbackId,
                        responseData: responseData
                    });
                }
            }
            var handlerName = message.handlerName;
            var handler = messageHandlers[handlerName];
            if (!handler) {
                handler = window[handlerName];
            }
            typeof handler === 'function' && handler(message.data, responseCallback);
        } catch (e) {
            console.log(e.message);
        }
    };
    window.WebViewJavascriptBridge = {
        registerHandler: registerHandler,
        _handleMessageFromObjC: _handleMessage
    };
})();
